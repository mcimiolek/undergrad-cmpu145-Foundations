;; Matthew Imiolek
;; CS145-52
;; Lab 3

(load "asmt-helper.txt")


                                                                                ;
;;----------------------------------
;;  PROBLEM 1:  FIND-IFFY
;;----------------------------------


;;  FIND-IFFY
;; ----------------------------------------
;;  INPUTS:  PRED, a predicate that takes one input
;;           LISTY, a list of potential inputs for PRED
;;  OUTPUT:  The first element of LISTY that satisfies PRED;
;;           or #f if no element of LISTY satisfies PRED.

;; Applies PRED to all the members and returns false if no element satisfies that
;; list and the value of the first one that does
(define FIND-IFFY (lambda (PRED LISTY)
                    (cond
                      ;; If the list is empty pred definitly can't work, so
                      ;; returns false
                      ((empty? LISTY) false)
                      ;; Returns the first value where PRED works
                      ((PRED (first LISTY)) (first LISTY))
                    ;; Goes through the list until either empty or a valid case
                    ;; for true occurs
                    (else (FIND-IFFY PRED (rest LISTY))))))

(tester '(FIND-IFFY even? '(1 23 5 6 9)))
(tester '(FIND-IFFY even? '()))
(tester '(FIND-IFFY even? '(4 23 5 6 9)))
(tester '(FIND-IFFY even? '(1 23 5 7 9)))



;; -------------------------------------
;;  PROBLEM 2:  FETCH-M2O-MATCH
;; -------------------------------------


;;  FETCH-M2O-MATCH
;; --------------------------------
;;  INPUTS:  X, some Scheme item
;;           Y, some Scheme item
;;           PAIRS, a list of pairs
;;  OUTPUT:  #f, if none of the pairs in PAIRS has the form (A Y)
;;           for some item A that is different from X;
;;           #t (or something that counts as #t) otherwise.

;; Checks if Y occurs in listy and returns false if it does, and checks if x
;; occurs in Listy and if Y doesn't make it false returns true if it does
(define FETCH-M2O-MATCH (lambda (X Y PAIRS)
                          ;; Looks through PAIRS for a positive case
                           (FIND-IFFY (lambda (PAIR)
                                          ;; Checks if x exists in the current 
                                          ;; pair
                                          (and (equal? Y (second PAIR))
                                          ;; Checks if y doesn't exists in all of
                                          ;; PAIRS
                                           (not (equal? X (first PAIR)))))
                                        ;;Returns false if x didn't exist or y
                                        ;;exists
                                      PAIRS)))

(tester '(FETCH-M2O-MATCH 1 3 '((1 3) (23 4) (5 9) (7 7) (9 8))))
(tester '(FETCH-M2O-MATCH 99 55 '((1 3) (23 4) (5 9) (7 7) (9 8))))
(tester '(FETCH-M2O-MATCH 3 7 '((1 3) (23 4) (5 9) (7 7) (9 8))))
(tester '(FETCH-M2O-MATCH 7 8 '((1 3) (23 4) (5 9) (7 7) (9 8))))



;; ----------------------------------------
;;   PROBLEM 3:  MANY-TO-ONE?
;; ----------------------------------------


;;  MANY-TO-ONE?
;; -------------------------------------
;;  INPUT:  PAIRS, a list of pairs representing a relation
;;  OUTPUT:  #t (or something that counts as TRUE) if the relation
;;   is "many to one" (i.e., if it contains at least two pairs
;;   that have different first items, but the same second item)

;; Checks if PAIRS is many to one
(define MANY-TO-ONE? (lambda (PAIRS)
                              (cond
                                ;; Returns false if after going through the list
                                ;; no true cases were found
                                ((empty? PAIRS) false)
                                  ;; Looks for a single case that makes PAIRS many
                                  ;; to one
                                  ((FETCH-M2O-MATCH (first (first PAIRS)) 
                                     (second (first PAIRS)) (rest PAIRS))
                                   ;; Returns that case
                                   (first PAIRS))
                                ;; If no case was found, but there are values
                                ;; left in list continues through the list
                                (else (MANY-TO-ONE? (rest PAIRS))))))

(tester '(MANY-TO-ONE? '((1 3) (23 4) (5 9) (7 7) (9 8))))
(tester '(MANY-TO-ONE? '((1 3) (23 3) (5 9) (7 7) (9 8))))
(tester '(MANY-TO-ONE? '((1 3) (1 4) (5 9) (7 7) (9 8))))
(tester '(MANY-TO-ONE? '((1 3) (2 4) (5 9) (10 3) (9 8))))
(tester '(MANY-TO-ONE? '((1 3) (23 9) (5 9) (7 7) (9 8))))
(tester '(MANY-TO-ONE? '((a 3) (23 4) (5 9) (a 7) (9 8))))
(tester '(MANY-TO-ONE? '((b 3) (23 4) (5 9) (e d) (c d))))