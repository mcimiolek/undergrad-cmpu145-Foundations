;;; ==========================================
;;;  CMPU-145, Spring 2017
;;;  Lab 1 Template
;;; ==========================================

(load "asmt-helper.txt")

(header "lab1" "Matthew Imiolek")

;;; -------------------------
;;;  PROBLEM 0
;;; -------------------------

(problem "0:  CONS, LIST and APPEND")

(tester '(cons 1 1))
(tester '(cons 1 '(1 2)))
(tester '(cons '(1 2) 1))
(tester '(cons '(1 2) '(1 2)))

(define item 1)
(define listy '(1 2))

(tester '(cons item listy))
(tester '(cons item item))
(tester '(cons listy item))
(tester '(cons listy listy))

(tester '(list item item))
(tester '(list item listy))
(tester '(list listy item))
(tester '(list listy listy))

;(tester '(append item item))     You can't append to a non-list
;(tester '(append item listy))    You can't append to a non-list
(tester '(append listy item))
(tester '(append listy listy))




;;; -----------------------------
;;;  PROBLEM 1
;;; -----------------------------

(problem "1:  MAP")

(tester '(map even? '(1 2 3 4 5)))
(tester '(map (lambda (x) (* x x)) '(1 2 3 4 5)))
(tester '(map first '((1 2 3) (4 5) (6 7 8 9))))
(tester '(map rest '((1 2 3) (4 5) (6 7 8 9))))
(tester '(map (lambda (subbie)
                (list (first subbie) (second subbie)))
              '((1 2 3) (4 5) (6 7 8 9))))

;;;  TRICKY
;;; -----------------------------------------
;;;  INPUTS:  ITEM, an item
;;;           LOL, a list of lists
;;;  OUTPUT:  A list-of-lists just like LOL, except that each
;;;             subsidiary list has been prepended with ITEM.

(define tricky (lambda (item lol)
; go through the list and add the number to the current item in the list
                 (map (lambda (flol)
                        (cons item flol)) lol)))

(tester '(tricky 1 '((1 2) (2 3) (3 4))))
(tester '(tricky 2 '((1 4 6) (7 3) (1))))
(tester '(tricky 3 '((1 6) (9 6) (7 8))))


;;; ----------------------------------
;;;  PROBLEM 2
;;; ----------------------------------

(problem "2: RANGE")

;;; RANGE
;;;-----------------------------------------
;;; INPUTS:   BR, a binary relation
;;; OUTPUT:   The range of BR

(define range (lambda (BR)
; go through the list and put the second value of each pair into a list
; also, remove duplicates
                (removal (map (lambda (fBR)
                                (second fBR)) BR))))

; code to remove duplicate values
(define removal (lambda (rngOnly)
                  (cond
                    ((empty? rngOnly) rngOnly)
                    ; if a value is already in rngOnly ignores it and looks at the rest of the list
                    ((member (first rngOnly) (rest rngOnly)) (removal(rest rngOnly)))
                    ; if a value is not already in rngOnly adds it to rngOnly
                    (else
                     (cons (first rngOnly) (removal(rest rngOnly)))))))

(tester '(range '( (1 2) (1 3) (1 4) (2 3) (2 4) (3 5) (3 1) (1 6))))
(tester '(range '((1 a) (1 b) (1 c) (2 a) (3 a) (4 b) (4 c) (5 c) (4 d) (5 a))))
(tester '(range ()))